// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gc_is_null
Rcpp::LogicalVector gc_is_null(SEXP pointer);
RcppExport SEXP _gdalcubes_gc_is_null(SEXP pointerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pointer(pointerSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_is_null(pointer));
    return rcpp_result_gen;
END_RCPP
}
// gc_version
Rcpp::List gc_version();
RcppExport SEXP _gdalcubes_gc_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gc_version());
    return rcpp_result_gen;
END_RCPP
}
// gc_gdalformats
std::vector<std::string> gc_gdalformats();
RcppExport SEXP _gdalcubes_gc_gdalformats() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gc_gdalformats());
    return rcpp_result_gen;
END_RCPP
}
// gc_set_gdal_config
void gc_set_gdal_config(std::string k, std::string v);
RcppExport SEXP _gdalcubes_gc_set_gdal_config(SEXP kSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::string >::type v(vSEXP);
    gc_set_gdal_config(k, v);
    return R_NilValue;
END_RCPP
}
// gc_set_streamining_dir
void gc_set_streamining_dir(std::string dir);
RcppExport SEXP _gdalcubes_gc_set_streamining_dir(SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    gc_set_streamining_dir(dir);
    return R_NilValue;
END_RCPP
}
// gc_gdalversion
std::string gc_gdalversion();
RcppExport SEXP _gdalcubes_gc_gdalversion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gc_gdalversion());
    return rcpp_result_gen;
END_RCPP
}
// gc_gdal_has_geos
bool gc_gdal_has_geos();
RcppExport SEXP _gdalcubes_gc_gdal_has_geos() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gc_gdal_has_geos());
    return rcpp_result_gen;
END_RCPP
}
// gc_add_format_dir
void gc_add_format_dir(std::string dir);
RcppExport SEXP _gdalcubes_gc_add_format_dir(SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    gc_add_format_dir(dir);
    return R_NilValue;
END_RCPP
}
// gc_init
void gc_init();
RcppExport SEXP _gdalcubes_gc_init() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gc_init();
    return R_NilValue;
END_RCPP
}
// gc_cleanup
void gc_cleanup();
RcppExport SEXP _gdalcubes_gc_cleanup() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gc_cleanup();
    return R_NilValue;
END_RCPP
}
// gc_datetime_values
Rcpp::StringVector gc_datetime_values(SEXP pin);
RcppExport SEXP _gdalcubes_gc_datetime_values(SEXP pinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_datetime_values(pin));
    return rcpp_result_gen;
END_RCPP
}
// gc_cube_info
Rcpp::List gc_cube_info(SEXP pin);
RcppExport SEXP _gdalcubes_gc_cube_info(SEXP pinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_cube_info(pin));
    return rcpp_result_gen;
END_RCPP
}
// gc_dimension_values_from_view
Rcpp::List gc_dimension_values_from_view(Rcpp::List view, std::string dt_unit);
RcppExport SEXP _gdalcubes_gc_dimension_values_from_view(SEXP viewSEXP, SEXP dt_unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type view(viewSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_unit(dt_unitSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_dimension_values_from_view(view, dt_unit));
    return rcpp_result_gen;
END_RCPP
}
// gc_dimension_bounds
Rcpp::List gc_dimension_bounds(SEXP pin, std::string dt_unit);
RcppExport SEXP _gdalcubes_gc_dimension_bounds(SEXP pinSEXP, SEXP dt_unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_unit(dt_unitSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_dimension_bounds(pin, dt_unit));
    return rcpp_result_gen;
END_RCPP
}
// gc_dimension_values
Rcpp::List gc_dimension_values(SEXP pin, std::string dt_unit);
RcppExport SEXP _gdalcubes_gc_dimension_values(SEXP pinSEXP, SEXP dt_unitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt_unit(dt_unitSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_dimension_values(pin, dt_unit));
    return rcpp_result_gen;
END_RCPP
}
// gc_open_image_collection
SEXP gc_open_image_collection(std::string filename);
RcppExport SEXP _gdalcubes_gc_open_image_collection(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_open_image_collection(filename));
    return rcpp_result_gen;
END_RCPP
}
// gc_image_collection_info
Rcpp::List gc_image_collection_info(SEXP pin);
RcppExport SEXP _gdalcubes_gc_image_collection_info(SEXP pinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_image_collection_info(pin));
    return rcpp_result_gen;
END_RCPP
}
// gc_image_collection_extent
Rcpp::List gc_image_collection_extent(SEXP pin, std::string srs);
RcppExport SEXP _gdalcubes_gc_image_collection_extent(SEXP pinSEXP, SEXP srsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_image_collection_extent(pin, srs));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_image_collection_from_format
void gc_create_image_collection_from_format(std::vector<std::string> files, std::string format_file, std::string outfile, bool unroll_archives);
RcppExport SEXP _gdalcubes_gc_create_image_collection_from_format(SEXP filesSEXP, SEXP format_fileSEXP, SEXP outfileSEXP, SEXP unroll_archivesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type files(filesSEXP);
    Rcpp::traits::input_parameter< std::string >::type format_file(format_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< bool >::type unroll_archives(unroll_archivesSEXP);
    gc_create_image_collection_from_format(files, format_file, outfile, unroll_archives);
    return R_NilValue;
END_RCPP
}
// gc_create_image_collection_from_datetime
void gc_create_image_collection_from_datetime(std::string outfile, std::vector<std::string> files, std::vector<std::string> date_time, bool use_subdatasets, std::vector<std::string> band_names, bool one_band_per_file);
RcppExport SEXP _gdalcubes_gc_create_image_collection_from_datetime(SEXP outfileSEXP, SEXP filesSEXP, SEXP date_timeSEXP, SEXP use_subdatasetsSEXP, SEXP band_namesSEXP, SEXP one_band_per_fileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type files(filesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type date_time(date_timeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_subdatasets(use_subdatasetsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type band_names(band_namesSEXP);
    Rcpp::traits::input_parameter< bool >::type one_band_per_file(one_band_per_fileSEXP);
    gc_create_image_collection_from_datetime(outfile, files, date_time, use_subdatasets, band_names, one_band_per_file);
    return R_NilValue;
END_RCPP
}
// gc_add_images
void gc_add_images(SEXP pin, std::vector<std::string> files, bool unroll_archives, std::string outfile);
RcppExport SEXP _gdalcubes_gc_add_images(SEXP pinSEXP, SEXP filesSEXP, SEXP unroll_archivesSEXP, SEXP outfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type files(filesSEXP);
    Rcpp::traits::input_parameter< bool >::type unroll_archives(unroll_archivesSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    gc_add_images(pin, files, unroll_archives, outfile);
    return R_NilValue;
END_RCPP
}
// gc_list_collection_formats
SEXP gc_list_collection_formats();
RcppExport SEXP _gdalcubes_gc_list_collection_formats() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gc_list_collection_formats());
    return rcpp_result_gen;
END_RCPP
}
// gc_create_view
SEXP gc_create_view(SEXP v);
RcppExport SEXP _gdalcubes_gc_create_view(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_view(v));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_image_collection_cube
SEXP gc_create_image_collection_cube(SEXP pin, Rcpp::IntegerVector chunk_sizes, SEXP mask, SEXP v);
RcppExport SEXP _gdalcubes_gc_create_image_collection_cube(SEXP pinSEXP, SEXP chunk_sizesSEXP, SEXP maskSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chunk_sizes(chunk_sizesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_image_collection_cube(pin, chunk_sizes, mask, v));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_ncdf_cube
SEXP gc_create_ncdf_cube(std::string path, Rcpp::IntegerVector chunk_sizes, bool auto_unpack);
RcppExport SEXP _gdalcubes_gc_create_ncdf_cube(SEXP pathSEXP, SEXP chunk_sizesSEXP, SEXP auto_unpackSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chunk_sizes(chunk_sizesSEXP);
    Rcpp::traits::input_parameter< bool >::type auto_unpack(auto_unpackSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_ncdf_cube(path, chunk_sizes, auto_unpack));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_dummy_cube
SEXP gc_create_dummy_cube(SEXP v, uint16_t nbands, double fill, Rcpp::IntegerVector chunk_sizes);
RcppExport SEXP _gdalcubes_gc_create_dummy_cube(SEXP vSEXP, SEXP nbandsSEXP, SEXP fillSEXP, SEXP chunk_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chunk_sizes(chunk_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_dummy_cube(v, nbands, fill, chunk_sizes));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_empty_cube
SEXP gc_create_empty_cube(SEXP v, uint16_t nbands, Rcpp::IntegerVector chunk_sizes);
RcppExport SEXP _gdalcubes_gc_create_empty_cube(SEXP vSEXP, SEXP nbandsSEXP, SEXP chunk_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chunk_sizes(chunk_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_empty_cube(v, nbands, chunk_sizes));
    return rcpp_result_gen;
END_RCPP
}
// gc_copy_cube
SEXP gc_copy_cube(SEXP pin);
RcppExport SEXP _gdalcubes_gc_copy_cube(SEXP pinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_copy_cube(pin));
    return rcpp_result_gen;
END_RCPP
}
// gc_from_json_file
SEXP gc_from_json_file(std::string path);
RcppExport SEXP _gdalcubes_gc_from_json_file(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_from_json_file(path));
    return rcpp_result_gen;
END_RCPP
}
// gc_from_json_string
SEXP gc_from_json_string(std::string json);
RcppExport SEXP _gdalcubes_gc_from_json_string(SEXP jsonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json(jsonSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_from_json_string(json));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_rename_bands_cube
SEXP gc_create_rename_bands_cube(SEXP pin, std::vector<std::string> names_old, std::vector<std::string> names_new);
RcppExport SEXP _gdalcubes_gc_create_rename_bands_cube(SEXP pinSEXP, SEXP names_oldSEXP, SEXP names_newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names_old(names_oldSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names_new(names_newSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_rename_bands_cube(pin, names_old, names_new));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_reduce_time_cube
SEXP gc_create_reduce_time_cube(SEXP pin, std::vector<std::string> reducers, std::vector<std::string> bands, SEXP names);
RcppExport SEXP _gdalcubes_gc_create_reduce_time_cube(SEXP pinSEXP, SEXP reducersSEXP, SEXP bandsSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type reducers(reducersSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bands(bandsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_reduce_time_cube(pin, reducers, bands, names));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_stream_reduce_time_cube
SEXP gc_create_stream_reduce_time_cube(SEXP pin, std::string cmd, uint16_t nbands, std::vector<std::string> names);
RcppExport SEXP _gdalcubes_gc_create_stream_reduce_time_cube(SEXP pinSEXP, SEXP cmdSEXP, SEXP nbandsSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type cmd(cmdSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_stream_reduce_time_cube(pin, cmd, nbands, names));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_stream_reduce_space_cube
SEXP gc_create_stream_reduce_space_cube(SEXP pin, std::string cmd, uint16_t nbands, std::vector<std::string> names);
RcppExport SEXP _gdalcubes_gc_create_stream_reduce_space_cube(SEXP pinSEXP, SEXP cmdSEXP, SEXP nbandsSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type cmd(cmdSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_stream_reduce_space_cube(pin, cmd, nbands, names));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_reduce_space_cube
SEXP gc_create_reduce_space_cube(SEXP pin, std::vector<std::string> reducers, std::vector<std::string> bands, SEXP names);
RcppExport SEXP _gdalcubes_gc_create_reduce_space_cube(SEXP pinSEXP, SEXP reducersSEXP, SEXP bandsSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type reducers(reducersSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bands(bandsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_reduce_space_cube(pin, reducers, bands, names));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_window_time_cube_reduce
SEXP gc_create_window_time_cube_reduce(SEXP pin, std::vector<int> window, std::vector<std::string> reducers, std::vector<std::string> bands);
RcppExport SEXP _gdalcubes_gc_create_window_time_cube_reduce(SEXP pinSEXP, SEXP windowSEXP, SEXP reducersSEXP, SEXP bandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type window(windowSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type reducers(reducersSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bands(bandsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_window_time_cube_reduce(pin, window, reducers, bands));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_window_time_cube_kernel
SEXP gc_create_window_time_cube_kernel(SEXP pin, std::vector<int> window, std::vector<double> kernel);
RcppExport SEXP _gdalcubes_gc_create_window_time_cube_kernel(SEXP pinSEXP, SEXP windowSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type window(windowSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_window_time_cube_kernel(pin, window, kernel));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_window_space_cube_reduce
SEXP gc_create_window_space_cube_reduce(SEXP pin, std::vector<std::string> reducers, std::vector<std::string> bands, int win_size_y, int win_size_x, bool keep_bands);
RcppExport SEXP _gdalcubes_gc_create_window_space_cube_reduce(SEXP pinSEXP, SEXP reducersSEXP, SEXP bandsSEXP, SEXP win_size_ySEXP, SEXP win_size_xSEXP, SEXP keep_bandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type reducers(reducersSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bands(bandsSEXP);
    Rcpp::traits::input_parameter< int >::type win_size_y(win_size_ySEXP);
    Rcpp::traits::input_parameter< int >::type win_size_x(win_size_xSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_bands(keep_bandsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_window_space_cube_reduce(pin, reducers, bands, win_size_y, win_size_x, keep_bands));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_window_space_cube_kernel
SEXP gc_create_window_space_cube_kernel(SEXP pin, std::vector<double> kernel, int win_size_y, int win_size_x, bool keep_bands);
RcppExport SEXP _gdalcubes_gc_create_window_space_cube_kernel(SEXP pinSEXP, SEXP kernelSEXP, SEXP win_size_ySEXP, SEXP win_size_xSEXP, SEXP keep_bandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< int >::type win_size_y(win_size_ySEXP);
    Rcpp::traits::input_parameter< int >::type win_size_x(win_size_xSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_bands(keep_bandsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_window_space_cube_kernel(pin, kernel, win_size_y, win_size_x, keep_bands));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_join_bands_cube
SEXP gc_create_join_bands_cube(Rcpp::List pin_list, std::vector<std::string> cube_names);
RcppExport SEXP _gdalcubes_gc_create_join_bands_cube(SEXP pin_listSEXP, SEXP cube_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pin_list(pin_listSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cube_names(cube_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_join_bands_cube(pin_list, cube_names));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_select_bands_cube
SEXP gc_create_select_bands_cube(SEXP pin, std::vector<std::string> bands);
RcppExport SEXP _gdalcubes_gc_create_select_bands_cube(SEXP pinSEXP, SEXP bandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bands(bandsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_select_bands_cube(pin, bands));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_select_time_cube
SEXP gc_create_select_time_cube(SEXP pin, std::vector<std::string> t);
RcppExport SEXP _gdalcubes_gc_create_select_time_cube(SEXP pinSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_select_time_cube(pin, t));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_apply_pixel_cube
SEXP gc_create_apply_pixel_cube(SEXP pin, std::vector<std::string> expr, std::vector<std::string> names, bool keep_bands);
RcppExport SEXP _gdalcubes_gc_create_apply_pixel_cube(SEXP pinSEXP, SEXP exprSEXP, SEXP namesSEXP, SEXP keep_bandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type expr(exprSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_bands(keep_bandsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_apply_pixel_cube(pin, expr, names, keep_bands));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_stream_apply_pixel_cube
SEXP gc_create_stream_apply_pixel_cube(SEXP pin, std::string cmd, uint16_t nbands, std::vector<std::string> names, bool keep_bands);
RcppExport SEXP _gdalcubes_gc_create_stream_apply_pixel_cube(SEXP pinSEXP, SEXP cmdSEXP, SEXP nbandsSEXP, SEXP namesSEXP, SEXP keep_bandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type cmd(cmdSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_bands(keep_bandsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_stream_apply_pixel_cube(pin, cmd, nbands, names, keep_bands));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_stream_apply_time_cube
SEXP gc_create_stream_apply_time_cube(SEXP pin, std::string cmd, uint16_t nbands, std::vector<std::string> names, bool keep_bands);
RcppExport SEXP _gdalcubes_gc_create_stream_apply_time_cube(SEXP pinSEXP, SEXP cmdSEXP, SEXP nbandsSEXP, SEXP namesSEXP, SEXP keep_bandsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type cmd(cmdSEXP);
    Rcpp::traits::input_parameter< uint16_t >::type nbands(nbandsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type names(namesSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_bands(keep_bandsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_stream_apply_time_cube(pin, cmd, nbands, names, keep_bands));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_filter_predicate_cube
SEXP gc_create_filter_predicate_cube(SEXP pin, std::string pred);
RcppExport SEXP _gdalcubes_gc_create_filter_predicate_cube(SEXP pinSEXP, SEXP predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type pred(predSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_filter_predicate_cube(pin, pred));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_filter_geom_cube
SEXP gc_create_filter_geom_cube(SEXP pin, std::string wkt, std::string srs);
RcppExport SEXP _gdalcubes_gc_create_filter_geom_cube(SEXP pinSEXP, SEXP wktSEXP, SEXP srsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type wkt(wktSEXP);
    Rcpp::traits::input_parameter< std::string >::type srs(srsSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_filter_geom_cube(pin, wkt, srs));
    return rcpp_result_gen;
END_RCPP
}
// gc_set_err_handler
void gc_set_err_handler(bool debug, std::string log_to_file);
RcppExport SEXP _gdalcubes_gc_set_err_handler(SEXP debugSEXP, SEXP log_to_fileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< std::string >::type log_to_file(log_to_fileSEXP);
    gc_set_err_handler(debug, log_to_file);
    return R_NilValue;
END_RCPP
}
// gc_eval_cube
void gc_eval_cube(SEXP pin, std::string outfile, uint8_t compression_level, bool with_VRT, bool write_bounds, SEXP packing);
RcppExport SEXP _gdalcubes_gc_eval_cube(SEXP pinSEXP, SEXP outfileSEXP, SEXP compression_levelSEXP, SEXP with_VRTSEXP, SEXP write_boundsSEXP, SEXP packingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type compression_level(compression_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type with_VRT(with_VRTSEXP);
    Rcpp::traits::input_parameter< bool >::type write_bounds(write_boundsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type packing(packingSEXP);
    gc_eval_cube(pin, outfile, compression_level, with_VRT, write_bounds, packing);
    return R_NilValue;
END_RCPP
}
// gc_write_chunks_ncdf
void gc_write_chunks_ncdf(SEXP pin, std::string dir, std::string name, uint8_t compression_level);
RcppExport SEXP _gdalcubes_gc_write_chunks_ncdf(SEXP pinSEXP, SEXP dirSEXP, SEXP nameSEXP, SEXP compression_levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type compression_level(compression_levelSEXP);
    gc_write_chunks_ncdf(pin, dir, name, compression_level);
    return R_NilValue;
END_RCPP
}
// gc_write_tif
void gc_write_tif(SEXP pin, std::string dir, std::string prefix, bool overviews, bool cog, SEXP creation_options, std::string rsmpl_overview, SEXP packing);
RcppExport SEXP _gdalcubes_gc_write_tif(SEXP pinSEXP, SEXP dirSEXP, SEXP prefixSEXP, SEXP overviewsSEXP, SEXP cogSEXP, SEXP creation_optionsSEXP, SEXP rsmpl_overviewSEXP, SEXP packingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< std::string >::type prefix(prefixSEXP);
    Rcpp::traits::input_parameter< bool >::type overviews(overviewsSEXP);
    Rcpp::traits::input_parameter< bool >::type cog(cogSEXP);
    Rcpp::traits::input_parameter< SEXP >::type creation_options(creation_optionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type rsmpl_overview(rsmpl_overviewSEXP);
    Rcpp::traits::input_parameter< SEXP >::type packing(packingSEXP);
    gc_write_tif(pin, dir, prefix, overviews, cog, creation_options, rsmpl_overview, packing);
    return R_NilValue;
END_RCPP
}
// gc_create_stream_cube
SEXP gc_create_stream_cube(SEXP pin, std::string cmd);
RcppExport SEXP _gdalcubes_gc_create_stream_cube(SEXP pinSEXP, SEXP cmdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type cmd(cmdSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_stream_cube(pin, cmd));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_simple_cube
SEXP gc_create_simple_cube(std::vector<std::string> files, std::vector<std::string> datetime_values, std::vector<std::string> bands, std::vector<std::string> band_names, double dx, double dy, Rcpp::IntegerVector chunk_sizes);
RcppExport SEXP _gdalcubes_gc_create_simple_cube(SEXP filesSEXP, SEXP datetime_valuesSEXP, SEXP bandsSEXP, SEXP band_namesSEXP, SEXP dxSEXP, SEXP dySEXP, SEXP chunk_sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type files(filesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type datetime_values(datetime_valuesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bands(bandsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type band_names(band_namesSEXP);
    Rcpp::traits::input_parameter< double >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< double >::type dy(dySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chunk_sizes(chunk_sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_simple_cube(files, datetime_values, bands, band_names, dx, dy, chunk_sizes));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_fill_time_cube
SEXP gc_create_fill_time_cube(SEXP pin, std::string method);
RcppExport SEXP _gdalcubes_gc_create_fill_time_cube(SEXP pinSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_fill_time_cube(pin, method));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_aggregate_time_cube
SEXP gc_create_aggregate_time_cube(SEXP pin, std::string dt, std::string method, uint32_t fact);
RcppExport SEXP _gdalcubes_gc_create_aggregate_time_cube(SEXP pinSEXP, SEXP dtSEXP, SEXP methodSEXP, SEXP factSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type fact(factSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_aggregate_time_cube(pin, dt, method, fact));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_aggregate_space_cube
SEXP gc_create_aggregate_space_cube(SEXP pin, double dx, double dy, std::string method, uint32_t fact);
RcppExport SEXP _gdalcubes_gc_create_aggregate_space_cube(SEXP pinSEXP, SEXP dxSEXP, SEXP dySEXP, SEXP methodSEXP, SEXP factSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< double >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< double >::type dy(dySEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type fact(factSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_aggregate_space_cube(pin, dx, dy, method, fact));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_slice_time_cube
SEXP gc_create_slice_time_cube(SEXP pin, std::string dt, int32_t it);
RcppExport SEXP _gdalcubes_gc_create_slice_time_cube(SEXP pinSEXP, SEXP dtSEXP, SEXP itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int32_t >::type it(itSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_slice_time_cube(pin, dt, it));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_slice_space_cube
SEXP gc_create_slice_space_cube(SEXP pin, std::vector<double> loc, std::vector<int32_t> i);
RcppExport SEXP _gdalcubes_gc_create_slice_space_cube(SEXP pinSEXP, SEXP locSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type loc(locSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_slice_space_cube(pin, loc, i));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_crop_cube
SEXP gc_create_crop_cube(SEXP pin, Rcpp::List extent, std::vector<int32_t> iextent, std::string snap);
RcppExport SEXP _gdalcubes_gc_create_crop_cube(SEXP pinSEXP, SEXP extentSEXP, SEXP iextentSEXP, SEXP snapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type extent(extentSEXP);
    Rcpp::traits::input_parameter< std::vector<int32_t> >::type iextent(iextentSEXP);
    Rcpp::traits::input_parameter< std::string >::type snap(snapSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_create_crop_cube(pin, extent, iextent, snap));
    return rcpp_result_gen;
END_RCPP
}
// gc_extract
Rcpp::DataFrame gc_extract(SEXP pin, std::string ogr_dataset, std::string time_column);
RcppExport SEXP _gdalcubes_gc_extract(SEXP pinSEXP, SEXP ogr_datasetSEXP, SEXP time_columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pin(pinSEXP);
    Rcpp::traits::input_parameter< std::string >::type ogr_dataset(ogr_datasetSEXP);
    Rcpp::traits::input_parameter< std::string >::type time_column(time_columnSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_extract(pin, ogr_dataset, time_column));
    return rcpp_result_gen;
END_RCPP
}
// gc_exec_worker
void gc_exec_worker(std::string json_path, uint32_t pid, uint32_t nworker, std::string work_dir, int compression);
RcppExport SEXP _gdalcubes_gc_exec_worker(SEXP json_pathSEXP, SEXP pidSEXP, SEXP nworkerSEXP, SEXP work_dirSEXP, SEXP compressionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type json_path(json_pathSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type pid(pidSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nworker(nworkerSEXP);
    Rcpp::traits::input_parameter< std::string >::type work_dir(work_dirSEXP);
    Rcpp::traits::input_parameter< int >::type compression(compressionSEXP);
    gc_exec_worker(json_path, pid, nworker, work_dir, compression);
    return R_NilValue;
END_RCPP
}
// gc_set_process_execution
void gc_set_process_execution(IntegerVector n_worker, std::string cmd, bool debug, int ncdf_compression_level, bool use_overviews, Rcpp::List gdal_options);
RcppExport SEXP _gdalcubes_gc_set_process_execution(SEXP n_workerSEXP, SEXP cmdSEXP, SEXP debugSEXP, SEXP ncdf_compression_levelSEXP, SEXP use_overviewsSEXP, SEXP gdal_optionsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type n_worker(n_workerSEXP);
    Rcpp::traits::input_parameter< std::string >::type cmd(cmdSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< int >::type ncdf_compression_level(ncdf_compression_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type use_overviews(use_overviewsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type gdal_options(gdal_optionsSEXP);
    gc_set_process_execution(n_worker, cmd, debug, ncdf_compression_level, use_overviews, gdal_options);
    return R_NilValue;
END_RCPP
}
// gc_set_progress
void gc_set_progress(bool show_progress);
RcppExport SEXP _gdalcubes_gc_set_progress(SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type show_progress(show_progressSEXP);
    gc_set_progress(show_progress);
    return R_NilValue;
END_RCPP
}
// gc_set_use_overviews
void gc_set_use_overviews(bool use_overviews);
RcppExport SEXP _gdalcubes_gc_set_use_overviews(SEXP use_overviewsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type use_overviews(use_overviewsSEXP);
    gc_set_use_overviews(use_overviews);
    return R_NilValue;
END_RCPP
}
// gc_detect_cores
int gc_detect_cores();
RcppExport SEXP _gdalcubes_gc_detect_cores() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gc_detect_cores());
    return rcpp_result_gen;
END_RCPP
}
// gc_simple_hash
std::string gc_simple_hash(std::string instr);
RcppExport SEXP _gdalcubes_gc_simple_hash(SEXP instrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type instr(instrSEXP);
    rcpp_result_gen = Rcpp::wrap(gc_simple_hash(instr));
    return rcpp_result_gen;
END_RCPP
}
// gc_create_stac_collection
void gc_create_stac_collection(Rcpp::DataFrame bands, Rcpp::DataFrame images, Rcpp::DataFrame gdalrefs, std::string outfile, Rcpp::DataFrame image_md);
RcppExport SEXP _gdalcubes_gc_create_stac_collection(SEXP bandsSEXP, SEXP imagesSEXP, SEXP gdalrefsSEXP, SEXP outfileSEXP, SEXP image_mdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type bands(bandsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type images(imagesSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type gdalrefs(gdalrefsSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfile(outfileSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type image_md(image_mdSEXP);
    gc_create_stac_collection(bands, images, gdalrefs, outfile, image_md);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gdalcubes_gc_is_null", (DL_FUNC) &_gdalcubes_gc_is_null, 1},
    {"_gdalcubes_gc_version", (DL_FUNC) &_gdalcubes_gc_version, 0},
    {"_gdalcubes_gc_gdalformats", (DL_FUNC) &_gdalcubes_gc_gdalformats, 0},
    {"_gdalcubes_gc_set_gdal_config", (DL_FUNC) &_gdalcubes_gc_set_gdal_config, 2},
    {"_gdalcubes_gc_set_streamining_dir", (DL_FUNC) &_gdalcubes_gc_set_streamining_dir, 1},
    {"_gdalcubes_gc_gdalversion", (DL_FUNC) &_gdalcubes_gc_gdalversion, 0},
    {"_gdalcubes_gc_gdal_has_geos", (DL_FUNC) &_gdalcubes_gc_gdal_has_geos, 0},
    {"_gdalcubes_gc_add_format_dir", (DL_FUNC) &_gdalcubes_gc_add_format_dir, 1},
    {"_gdalcubes_gc_init", (DL_FUNC) &_gdalcubes_gc_init, 0},
    {"_gdalcubes_gc_cleanup", (DL_FUNC) &_gdalcubes_gc_cleanup, 0},
    {"_gdalcubes_gc_datetime_values", (DL_FUNC) &_gdalcubes_gc_datetime_values, 1},
    {"_gdalcubes_gc_cube_info", (DL_FUNC) &_gdalcubes_gc_cube_info, 1},
    {"_gdalcubes_gc_dimension_values_from_view", (DL_FUNC) &_gdalcubes_gc_dimension_values_from_view, 2},
    {"_gdalcubes_gc_dimension_bounds", (DL_FUNC) &_gdalcubes_gc_dimension_bounds, 2},
    {"_gdalcubes_gc_dimension_values", (DL_FUNC) &_gdalcubes_gc_dimension_values, 2},
    {"_gdalcubes_gc_open_image_collection", (DL_FUNC) &_gdalcubes_gc_open_image_collection, 1},
    {"_gdalcubes_gc_image_collection_info", (DL_FUNC) &_gdalcubes_gc_image_collection_info, 1},
    {"_gdalcubes_gc_image_collection_extent", (DL_FUNC) &_gdalcubes_gc_image_collection_extent, 2},
    {"_gdalcubes_gc_create_image_collection_from_format", (DL_FUNC) &_gdalcubes_gc_create_image_collection_from_format, 4},
    {"_gdalcubes_gc_create_image_collection_from_datetime", (DL_FUNC) &_gdalcubes_gc_create_image_collection_from_datetime, 6},
    {"_gdalcubes_gc_add_images", (DL_FUNC) &_gdalcubes_gc_add_images, 4},
    {"_gdalcubes_gc_list_collection_formats", (DL_FUNC) &_gdalcubes_gc_list_collection_formats, 0},
    {"_gdalcubes_gc_create_view", (DL_FUNC) &_gdalcubes_gc_create_view, 1},
    {"_gdalcubes_gc_create_image_collection_cube", (DL_FUNC) &_gdalcubes_gc_create_image_collection_cube, 4},
    {"_gdalcubes_gc_create_ncdf_cube", (DL_FUNC) &_gdalcubes_gc_create_ncdf_cube, 3},
    {"_gdalcubes_gc_create_dummy_cube", (DL_FUNC) &_gdalcubes_gc_create_dummy_cube, 4},
    {"_gdalcubes_gc_create_empty_cube", (DL_FUNC) &_gdalcubes_gc_create_empty_cube, 3},
    {"_gdalcubes_gc_copy_cube", (DL_FUNC) &_gdalcubes_gc_copy_cube, 1},
    {"_gdalcubes_gc_from_json_file", (DL_FUNC) &_gdalcubes_gc_from_json_file, 1},
    {"_gdalcubes_gc_from_json_string", (DL_FUNC) &_gdalcubes_gc_from_json_string, 1},
    {"_gdalcubes_gc_create_rename_bands_cube", (DL_FUNC) &_gdalcubes_gc_create_rename_bands_cube, 3},
    {"_gdalcubes_gc_create_reduce_time_cube", (DL_FUNC) &_gdalcubes_gc_create_reduce_time_cube, 4},
    {"_gdalcubes_gc_create_stream_reduce_time_cube", (DL_FUNC) &_gdalcubes_gc_create_stream_reduce_time_cube, 4},
    {"_gdalcubes_gc_create_stream_reduce_space_cube", (DL_FUNC) &_gdalcubes_gc_create_stream_reduce_space_cube, 4},
    {"_gdalcubes_gc_create_reduce_space_cube", (DL_FUNC) &_gdalcubes_gc_create_reduce_space_cube, 4},
    {"_gdalcubes_gc_create_window_time_cube_reduce", (DL_FUNC) &_gdalcubes_gc_create_window_time_cube_reduce, 4},
    {"_gdalcubes_gc_create_window_time_cube_kernel", (DL_FUNC) &_gdalcubes_gc_create_window_time_cube_kernel, 3},
    {"_gdalcubes_gc_create_window_space_cube_reduce", (DL_FUNC) &_gdalcubes_gc_create_window_space_cube_reduce, 6},
    {"_gdalcubes_gc_create_window_space_cube_kernel", (DL_FUNC) &_gdalcubes_gc_create_window_space_cube_kernel, 5},
    {"_gdalcubes_gc_create_join_bands_cube", (DL_FUNC) &_gdalcubes_gc_create_join_bands_cube, 2},
    {"_gdalcubes_gc_create_select_bands_cube", (DL_FUNC) &_gdalcubes_gc_create_select_bands_cube, 2},
    {"_gdalcubes_gc_create_select_time_cube", (DL_FUNC) &_gdalcubes_gc_create_select_time_cube, 2},
    {"_gdalcubes_gc_create_apply_pixel_cube", (DL_FUNC) &_gdalcubes_gc_create_apply_pixel_cube, 4},
    {"_gdalcubes_gc_create_stream_apply_pixel_cube", (DL_FUNC) &_gdalcubes_gc_create_stream_apply_pixel_cube, 5},
    {"_gdalcubes_gc_create_stream_apply_time_cube", (DL_FUNC) &_gdalcubes_gc_create_stream_apply_time_cube, 5},
    {"_gdalcubes_gc_create_filter_predicate_cube", (DL_FUNC) &_gdalcubes_gc_create_filter_predicate_cube, 2},
    {"_gdalcubes_gc_create_filter_geom_cube", (DL_FUNC) &_gdalcubes_gc_create_filter_geom_cube, 3},
    {"_gdalcubes_gc_set_err_handler", (DL_FUNC) &_gdalcubes_gc_set_err_handler, 2},
    {"_gdalcubes_gc_eval_cube", (DL_FUNC) &_gdalcubes_gc_eval_cube, 6},
    {"_gdalcubes_gc_write_chunks_ncdf", (DL_FUNC) &_gdalcubes_gc_write_chunks_ncdf, 4},
    {"_gdalcubes_gc_write_tif", (DL_FUNC) &_gdalcubes_gc_write_tif, 8},
    {"_gdalcubes_gc_create_stream_cube", (DL_FUNC) &_gdalcubes_gc_create_stream_cube, 2},
    {"_gdalcubes_gc_create_simple_cube", (DL_FUNC) &_gdalcubes_gc_create_simple_cube, 7},
    {"_gdalcubes_gc_create_fill_time_cube", (DL_FUNC) &_gdalcubes_gc_create_fill_time_cube, 2},
    {"_gdalcubes_gc_create_aggregate_time_cube", (DL_FUNC) &_gdalcubes_gc_create_aggregate_time_cube, 4},
    {"_gdalcubes_gc_create_aggregate_space_cube", (DL_FUNC) &_gdalcubes_gc_create_aggregate_space_cube, 5},
    {"_gdalcubes_gc_create_slice_time_cube", (DL_FUNC) &_gdalcubes_gc_create_slice_time_cube, 3},
    {"_gdalcubes_gc_create_slice_space_cube", (DL_FUNC) &_gdalcubes_gc_create_slice_space_cube, 3},
    {"_gdalcubes_gc_create_crop_cube", (DL_FUNC) &_gdalcubes_gc_create_crop_cube, 4},
    {"_gdalcubes_gc_extract", (DL_FUNC) &_gdalcubes_gc_extract, 3},
    {"_gdalcubes_gc_exec_worker", (DL_FUNC) &_gdalcubes_gc_exec_worker, 5},
    {"_gdalcubes_gc_set_process_execution", (DL_FUNC) &_gdalcubes_gc_set_process_execution, 6},
    {"_gdalcubes_gc_set_progress", (DL_FUNC) &_gdalcubes_gc_set_progress, 1},
    {"_gdalcubes_gc_set_use_overviews", (DL_FUNC) &_gdalcubes_gc_set_use_overviews, 1},
    {"_gdalcubes_gc_detect_cores", (DL_FUNC) &_gdalcubes_gc_detect_cores, 0},
    {"_gdalcubes_gc_simple_hash", (DL_FUNC) &_gdalcubes_gc_simple_hash, 1},
    {"_gdalcubes_gc_create_stac_collection", (DL_FUNC) &_gdalcubes_gc_create_stac_collection, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_gdalcubes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
